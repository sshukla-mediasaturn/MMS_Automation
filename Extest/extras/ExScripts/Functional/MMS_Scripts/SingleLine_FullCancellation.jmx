<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r2016">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">fom-test-nl.media-saturn.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseDir" elementType="Argument">
            <stringProp name="Argument.name">baseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Fetch details from Global Config" enabled="true">
        <collectionProp name="Arguments.arguments"/>
        <stringProp name="filename">${baseDir}\..\..\MMS_Credentials_Properties.properties</stringProp>
        <stringProp name="variablesPrefix"></stringProp>
        <stringProp name="delimiter">=</stringProp>
        <intProp name="skipLines">0</intProp>
        <boolProp name="storeSysProp">false</boolProp>
      </kg.apc.jmeter.config.VariablesFromCSV>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Fetch details from Test Cases Input CSV" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${baseDir}\..\..\MMS_TestData.csv</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="expicient.extest.jmeter.config.ExpSterlingEnvDefaultsConfigGui" testclass="ConfigTestElement" testname="MMS Environment Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.config.ExpSterlingEnvDefaultsConfigGui" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="YFSEnvironment.userId" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.name">YFSEnvironment.userId</stringProp>
              <stringProp name="Argument.value">${username}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
            <elementProp name="YFSEnvironment.password" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.name">YFSEnvironment.password</stringProp>
              <stringProp name="Argument.value">Summer2021,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/smcfs/interop/InteropHttpServlet</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Order No Generation" enabled="true">
        <stringProp name="maximumValue">999999</stringProp>
        <stringProp name="minimumValue">100000</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <boolProp name="perThread">false</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">OrderNo</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sales Order Flow without Fragment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1568008041000</longProp>
        <longProp name="ThreadGroup.end_time">1568008041000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="DeliveryPromise" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="DeliveryPromise" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">mshGetDeliveryPromise</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Promise AllocationRuleID=&quot;&quot; EnterpriseCode=&quot;MSH_NL&quot; OrganizationCode=&quot;MSH_NL&quot;  OptimizationType=&quot;01&quot; &gt;
	&lt;ShipToAddress AddressLine1=&quot;&quot; AddressLine6=&quot;&quot; City=&quot;Wein&quot; Country=&quot;NL&quot; ZipCode=&quot;1120&quot; /&gt;
	&lt;PromiseLines&gt;
		&lt;PromiseLine ItemID=&quot;${item1}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;1&quot; 
		LevelOfService=&quot;MSH_HOME_DEL&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
		
		&lt;PromiseLine ItemID=&quot;${item2}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;1&quot; 
		LevelOfService=&quot;MSH_HOME_DEL&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
	&lt;/PromiseLines&gt;
&lt;/Promise&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">DeliveryPromise</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="DelvDateValidation" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">DelvDate</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@DeliveryDate</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipDateValidation" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">ShipDate</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@ShipDate</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipNode" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">DelvPromise_ShipNode</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@ShipNode</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="ReservationID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="ReservationID" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">MSHReserveAvailableInventory</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Promise EnterpriseCode=&quot;MSH_NL&quot; OrganizationCode=&quot;MM_NL&quot;  OptimizationType=&quot;01&quot; &gt;
	&lt;ReservationParameters  ReservationID=&quot;${OrderNo}f8-72eb-4272-9fd9-40bfb1d96beb&quot; AllowPartialReservation=&quot;N&quot; /&gt;
	&lt;ShipToAddress AddressLine1=&quot;dsagfqe&quot; AddressLine6=&quot;&quot; City=&quot;Wien&quot; Country=&quot;NL&quot; ZipCode=&quot;112a0&quot; /&gt;
	&lt;PromiseLines&gt;
		&lt;PromiseLine ItemID=&quot;${item1}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;${RequiredQty}&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; 
		FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
	&lt;/PromiseLines&gt;
&lt;/Promise&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">ReservationID</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ReservationIDValidation" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">ReservationID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservation/@ReservationID</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipNode" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">ShipNode</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservation/@ShipNode</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="QtyToBeReserved" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">QtyToBeReserved</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservations/@QtyToBeReserved</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">
SampleResult.setResponseMessage(&quot;Reservation ID is :&quot;  +   &quot;${ReservationID}&quot;);

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="Create Order" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="Create Order" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">N</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">createOrder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Order BypassPricing=&quot;Y&quot; CustomerEMailID=&quot;Test@test.com&quot;
    DocumentType=&quot;0001&quot; EnterpriseCode=&quot;MSH_NL&quot; EntryType=&quot;DESKTOP&quot;
    OrderDate=&quot;${CurrenttimeStamp}&quot; OrderNo=&quot;${OrderNo}&quot;
    OrderType=&quot;B2C_SALE&quot; PaymentStatus=&quot;PAID&quot; SearchCriteria1=&quot;Y&quot;
    SellerOrganizationCode=&quot;MM_NL&quot; TaxPayerId=&quot;&quot; xmlns=&quot;http://www.sterlingcommerce.com/documentation/YFS/createOrder/input&quot;&gt;
    &lt;HeaderCharges&gt;
        &lt;HeaderCharge ChargeAmount=&quot;0&quot;
            ChargeCategory=&quot;HOMEDEL_SHIPPING_FEE&quot; ChargeName=&quot;126606&quot; Reference=&quot;126606&quot;/&gt;
        &lt;HeaderCharge ChargeAmount=&quot;2.99&quot;
            ChargeCategory=&quot;HOMEDEL_SHIPPING_FEE&quot; ChargeName=&quot;733797&quot; Reference=&quot;733797&quot;/&gt;
    &lt;/HeaderCharges&gt;
    &lt;OrderLineRelationships/&gt;
    &lt;OrderLines&gt;
        &lt;OrderLine DeliveryMethod=&quot;SHP&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot;
            ItemGroupCode=&quot;PROD&quot; LevelOfService=&quot;MSH_HOME_DEL&quot;
            LineType=&quot;STOCKED&quot; OrderedQty=&quot;${QtyToBeReserved}&quot; ShipNode=&quot;${ShipNode}&quot; PrimeLineNo=&quot;1&quot; SubLineNo=&quot;1&quot;&gt;
            &lt;LineCharges/&gt;
            &lt;LineTaxes&gt;
                &lt;LineTax ChargeCategory=&quot;LINE_TAX&quot; ChargeName=&quot;LineTax&quot;
                    Reference1=&quot;1&quot; Reference2=&quot;13.33&quot; Tax=&quot;13.33&quot;
                    TaxName=&quot;VAT&quot; TaxPercentage=&quot;20.0&quot; TaxableFlag=&quot;N&quot;/&gt;
            &lt;/LineTaxes&gt;
             &lt;OrderLineReservations&gt;
     &lt;OrderLineReservation ExternalNode=&quot;Y&quot; Quantity=&quot;${QtyToBeReserved}&quot; IsProcured=&quot;N&quot; IsSubstituted=&quot;N&quot; ItemID=&quot;${item1}&quot; ReservationID=&quot;${ReservationID}&quot;/&gt;
       &lt;/OrderLineReservations&gt;
            &lt;Extn Brand=&quot;SONY I.E.&quot;
                DeliveryTimeFrame=&quot;Lieferung bis  Samstag, 09.10.2021&quot;
                LineItemNumber=&quot;126606&quot; LogisticsClass=&quot;1&quot;
                ReleaseDate=&quot;&quot; ShippingCostRefID=&quot;126606&quot; SplitCriteria1=&quot;STD&quot;&gt;
                &lt;MSHWarrantyExtensionsList/&gt;
                &lt;MSHOrderlineFeatureList&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT12854&quot;
                        FeatureValue=&quot;Sony &quot; Label=&quot;Sony &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT12855&quot;
                        FeatureValue=&quot;Marvel&apos;s Spider-Man: Miles Morales Ultimate Edition &quot; Label=&quot;Marvel&apos;s Spider-Man: Miles Morales Ultimate Edition &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT10988&quot;
                        FeatureValue=&quot;Action &quot; Label=&quot;Action &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT12884&quot;
                        FeatureValue=&quot;Ab 16 Jahren &quot; Label=&quot;Ab 16 Jahren &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT12000&quot;
                        FeatureValue=&quot;PlayStation 5 &quot; Label=&quot;PlayStation 5 &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT11560&quot;
                        FeatureValue=&quot;Blu-ray &quot; Label=&quot;Blu-ray &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT12964&quot;
                        FeatureValue=&quot;1 &quot; Label=&quot;1 &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT10900&quot;
                        FeatureValue=&quot;Ultimate Edition &quot; Label=&quot;Ultimate Edition &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT13366&quot;
                        FeatureValue=&quot;Spieler lokal: 1 &quot; Label=&quot;Spieler lokal: 1 &quot;/&gt;
                    &lt;MSHOrderlineFeature FeatureID=&quot;PRODFEAT16490&quot;
                        FeatureValue=&quot;Ja &quot; Label=&quot;Ja &quot;/&gt;
                &lt;/MSHOrderlineFeatureList&gt;
            &lt;/Extn&gt;
            &lt;Item CostCurrency=&quot;EUR&quot;
                ItemDesc=&quot;Marvel&apos;s Spider-Man: Miles Morales Ultimate Edition - [PlayStation 5]&quot;
                ItemID=&quot;${item1}&quot;
                ItemShortDesc=&quot;Marvel&apos;s Spider-Man: Miles Morales Ultimate Edition - [PlayStation 5]&quot;
                UPCCode=&quot;${item1}&quot; UnitCost=&quot;5.00&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;
            &lt;LinePriceInfo IsPriceLocked=&quot;Y&quot; ListPrice=&quot;5.00&quot; UnitPrice=&quot;5.00&quot;/&gt;
        &lt;/OrderLine&gt;
    &lt;/OrderLines&gt;
    &lt;Extn AlternativeUserID=&quot;197216174&quot; Language=&quot;es&quot; LoyaltyId=&quot;&quot;
        OutletID=&quot;742&quot; PickupLocation=&quot;0&quot; RetailPriceInclDuties=&quot;N&quot;
        UCMUserID=&quot;197216174&quot; WCSUserID=&quot;197216174&quot;&gt;
        &lt;MSHB2bCustomerDtlList/&gt;
        &lt;MSHLegalAgreementDtlList/&gt;
        &lt;MSHLoyaltyDtlList&gt;
            &lt;MSHLoyaltyDtl IsLoyaltyMember=&quot;N&quot; WinAmount=&quot;&quot; WinFlag=&quot;N&quot; WinType=&quot;&quot;/&gt;
        &lt;/MSHLoyaltyDtlList&gt;
    &lt;/Extn&gt;
    &lt;PaymentMethods&gt;
        &lt;PaymentMethod
            PaymentReference1=&quot;aa644e2992244f3c8a5fe9ba79ccdf5a&quot;
            PaymentReference2=&quot;&quot; PaymentReference9=&quot;&quot; PaymentType=&quot;CRECA&quot;&gt;
            &lt;PaymentDetailsList&gt;
                &lt;PaymentDetails ChargeType=&quot;CHARGE&quot;
                    ProcessedAmount=&quot;52.99&quot; RequestAmount=&quot;52.99&quot;/&gt;
            &lt;/PaymentDetailsList&gt;
        &lt;/PaymentMethod&gt;
		    &lt;/PaymentMethods&gt;
    &lt;PriceInfo Currency=&quot;EUR&quot;/&gt;
    &lt;PersonInfoBillTo AddressID=&quot;&quot;
        AddressLine1=&quot;dsagfqe&quot; AddressLine2=&quot;&quot;
        City=&quot;Wien&quot; Company=&quot;&quot; Country=&quot;NL&quot; DayPhone=&quot;422464214&quot;
        EMailID=&quot;Test@test.com&quot; FirstName=&quot;hth&quot;
        JobTitle=&quot;&quot; LastName=&quot;yjr&quot; MobilePhone=&quot;422464214&quot; Title=&quot;&quot; ZipCode=&quot;1120&quot;&gt;
        &lt;Extn Unknown=&quot;&quot;/&gt;
    &lt;/PersonInfoBillTo&gt;
    &lt;HeaderTaxes&gt;
        &lt;HeaderTax ChargeCategory=&quot;HOMEDEL_SHIPPING_TAX&quot;
            ChargeName=&quot;126606&quot; Reference1=&quot;1&quot; Reference2=&quot;126606&quot;
            Tax=&quot;0&quot; TaxName=&quot;VAT&quot; TaxPercentage=&quot;20.0&quot; TaxableFlag=&quot;N&quot;/&gt;
        &lt;HeaderTax ChargeCategory=&quot;HOMEDEL_SHIPPING_TAX&quot;
            ChargeName=&quot;733797&quot; Reference1=&quot;2&quot; Reference2=&quot;733797&quot;
            Tax=&quot;0.5&quot; TaxName=&quot;VAT&quot; TaxPercentage=&quot;20.0&quot; TaxableFlag=&quot;N&quot;/&gt;
    &lt;/HeaderTaxes&gt;
    &lt;PersonInfoShipTo AddressID=&quot;&quot;
        AddressLine1=&quot;dsagfqe&quot; AddressLine2=&quot;&quot;
        City=&quot;Wien&quot; Company=&quot;&quot; Country=&quot;NL&quot; DayPhone=&quot;422464214&quot;
        EMailID=&quot;Test@test.com&quot; FirstName=&quot;hth&quot;
        JobTitle=&quot;&quot; LastName=&quot;yjr&quot; MobilePhone=&quot;422464214&quot; Title=&quot;&quot; ZipCode=&quot;112a0&quot;&gt;
        &lt;Extn Unknown=&quot;&quot;/&gt;
    &lt;/PersonInfoShipTo&gt;
    &lt;Notes&gt;
        &lt;Note NoteText=&quot;Order created successfully&quot; Priority=&quot;1&quot; ReasonCode=&quot;ORDER_CREATE&quot;/&gt;
    &lt;/Notes&gt;
&lt;/Order&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Create Order</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get current time" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;


Date date = new Date();

		SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);

		String CurrenttimeStamp = sdf.format(date);

		vars.put(&quot;CurrenttimeStamp&quot;,CurrenttimeStamp);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">1</intProp>
          </ResultAction>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="OrderHeaderKey" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">OrderHeaderKey</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@OrderHeaderKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="OrderNo" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">OrderNo</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@OrderNo</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (&quot;${OrderNo}&quot; == &quot; &quot;   &amp;&amp; &quot;${OrderHeaderKey}&quot; == &quot; &quot;){

	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Order is Failed&quot;);
	SampleResult.setStopTestNow(true);
}

else{


	SampleResult.setSuccessful(true);
	SampleResult.setResponseMessage(&quot;Order is successfull&quot;  +   &quot;${OrderNo}&quot;);
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ErrorMsg" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">ErrorMsg</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Errors/Error/@ErrorDescription</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="ResponseErrorMsg" enabled="true">
            <stringProp name="BeanShellAssertion.query">
SampleResult.setResponseMessage(&quot;Order Failed :&quot; +&quot; ${ErrorMsg}&quot;);

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="ResponseSuccessMsg" enabled="true">
            <stringProp name="BeanShellAssertion.query">
SampleResult.setResponseMessage(&quot;Order created Successfully  :&quot; +&quot; ${OrderNo}&quot;);

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="Cancellation" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="Cancellation" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">MSHCancelWrapper</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Order DocumentType=&quot;0001&quot; EnterpriseCode=&quot;MSH_NL&quot; ModificationReasonCode=&quot;CSTWSH&quot; OrderNo=&quot;${OrderNo}&quot;&gt;
&lt;OrderLines&gt;
&lt;OrderLine PrimeLineNo=&apos;1&apos; SubLineNo=&apos;1&apos; OrderedQty=&quot;${QtyToBeReserved}&quot; Action=&quot;CANCEL&quot; /&gt;
&lt;/OrderLines&gt;
&lt;/Order&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Cancellation</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="ResponseSuccessMsg" enabled="true">
            <stringProp name="BeanShellAssertion.query">
SampleResult.setResponseMessage(&quot;Order cancelled successfully  :&quot; + &quot;${OrderNo}&quot;  + &quot; ${OrdStatus}&quot;);

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="OrderedQty" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">OrderedQty</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@OrderedQty</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="OrdStatus" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">OrdStatus</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@Status</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (&quot;${OrdStatus}&quot; == &quot;Cancelled&quot; &amp;&amp; &quot;${OrderedQty}&quot; == &quot;0&quot; ){

	SampleResult.setSuccessful(true);
	SampleResult.setResponseMessage(&quot;Order is cancelled successfully&quot;  +   &quot;${OrderNo}&quot;);
}

else{

	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Order is Failed&quot;);
	SampleResult.setStopTestNow(true);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>2</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
