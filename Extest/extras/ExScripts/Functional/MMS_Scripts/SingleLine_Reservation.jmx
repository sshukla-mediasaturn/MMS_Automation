<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r2016">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">fom-test-nl.media-saturn.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseDir" elementType="Argument">
            <stringProp name="Argument.name">baseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Fetch details from Global Config" enabled="true">
        <collectionProp name="Arguments.arguments"/>
        <stringProp name="filename">${baseDir}\..\..\MMS_Credentials_Properties.properties</stringProp>
        <stringProp name="variablesPrefix"></stringProp>
        <stringProp name="delimiter">=</stringProp>
        <intProp name="skipLines">0</intProp>
        <boolProp name="storeSysProp">false</boolProp>
      </kg.apc.jmeter.config.VariablesFromCSV>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Fetch details from Test Cases Input CSV" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${baseDir}\..\..\MMS_TestData_MultiLine.csv</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="expicient.extest.jmeter.config.ExpSterlingEnvDefaultsConfigGui" testclass="ConfigTestElement" testname="MMS Environment Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.config.ExpSterlingEnvDefaultsConfigGui" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="YFSEnvironment.userId" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.name">YFSEnvironment.userId</stringProp>
              <stringProp name="Argument.value">${username}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
            <elementProp name="YFSEnvironment.password" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.name">YFSEnvironment.password</stringProp>
              <stringProp name="Argument.value">Summer2021,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/smcfs/interop/InteropHttpServlet</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Order No Generation" enabled="true">
        <stringProp name="maximumValue">999999</stringProp>
        <stringProp name="minimumValue">100000</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <boolProp name="perThread">false</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">OrderNo</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sales Order Flow without Fragment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1568008041000</longProp>
        <longProp name="ThreadGroup.end_time">1568008041000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="DeliveryPromise" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="DeliveryPromise" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">mshGetDeliveryPromise</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Promise AllocationRuleID=&quot;&quot; EnterpriseCode=&quot;MSH_NL&quot; OrganizationCode=&quot;MSH_NL&quot;  OptimizationType=&quot;01&quot; &gt;
	&lt;ShipToAddress AddressLine1=&quot;&quot; AddressLine6=&quot;&quot; City=&quot;Wein&quot; Country=&quot;NL&quot; ZipCode=&quot;1120&quot; /&gt;
	&lt;PromiseLines&gt;
		&lt;PromiseLine ItemID=&quot;${item1}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;1&quot; 
		LevelOfService=&quot;MSH_HOME_DEL&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
		
		&lt;PromiseLine ItemID=&quot;${item2}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;1&quot; 
		LevelOfService=&quot;MSH_HOME_DEL&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
	&lt;/PromiseLines&gt;
&lt;/Promise&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">DeliveryPromise</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="DelvDateValidation" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">DelvDate</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@DeliveryDate</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipDateValidation" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">ShipDate</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@ShipDate</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipNode" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">DelvPromise_ShipNode</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@ShipNode</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="ReservationID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="ReservationID" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">MSHReserveAvailableInventory</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Promise EnterpriseCode=&quot;MSH_NL&quot; OrganizationCode=&quot;MM_NL&quot;  OptimizationType=&quot;01&quot; &gt;
	&lt;ReservationParameters  ReservationID=&quot;${OrderNo}f8-72eb-4272-9fd9-40bfb1d96beb&quot; AllowPartialReservation=&quot;N&quot; /&gt;
	&lt;ShipToAddress AddressLine1=&quot;dsagfqe&quot; AddressLine6=&quot;&quot; City=&quot;Wien&quot; Country=&quot;NL&quot; ZipCode=&quot;112a0&quot; /&gt;
	&lt;PromiseLines&gt;
		&lt;PromiseLine ItemID=&quot;${item1}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;${RequiredQty}&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; 
		FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
	&lt;/PromiseLines&gt;
&lt;/Promise&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">ReservationID</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ReservationIDValidation" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">ReservationID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservation/@ReservationID</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipNode" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">ShipNode</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservation/@ShipNode</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="QtyToBeReserved" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">QtyToBeReserved</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservations/@QtyToBeReserved</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">
SampleResult.setResponseMessage(&quot;Reservation ID is :&quot;  +   &quot;${ReservationID}&quot;);

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (&quot;${QtyToBeReserved}&quot; == &quot;${TotalReservedQty}&quot;){

	SampleResult.setSuccessful(true);
	SampleResult.setResponseMessage(&quot;Reservation is successfull : reservation id &quot;  +   &quot;${ReservationID}&quot;);
}

else{

	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Reservation is Failed : Invalid ItemID &quot; + &quot;${ItemID}&quot;  + &quot;${ErrorMsg}&quot;);
	SampleResult.setStopTestNow(true);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TotalReservedQty" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">TotalReservedQty</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservations/@TotalReservedQty</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ErrorMsg" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">ErrorMsg</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Errors/Error/@ErrorDescription</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ItemID" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">ItemID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//PromiseLine/@ItemID</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>2</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
