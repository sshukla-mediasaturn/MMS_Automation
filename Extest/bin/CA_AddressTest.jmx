<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r2016">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">F:\NewBalance Scripts\NB Scripts\test.csv</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="expicient.extest.jmeter.config.ExpSterlingEnvDefaultsConfigGui" testclass="ConfigTestElement" testname="Expicient Sterling Environment Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.config.ExpSterlingEnvDefaultsConfigGui" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="YFSEnvironment.userId" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.name">YFSEnvironment.userId</stringProp>
              <stringProp name="Argument.value">admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
            <elementProp name="YFSEnvironment.password" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.name">YFSEnvironment.password</stringProp>
              <stringProp name="Argument.value">password</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">localhost</stringProp>
        <stringProp name="HTTPSampler.port">7002</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/smcfs/interop/InteropHttpServlet</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1407165494000</longProp>
        <longProp name="ThreadGroup.end_time">1407165494000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">15</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="ManageOrganizationHierachy" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="ManageOrganizationHierachy" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">N</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">modifyOrganizationHierarchy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Organization Operation=&quot;Manage&quot; InventoryOrganizationCode=&quot;${InventoryOrganizationCode}&quot;  LocaleCode=&quot;${LOCALE}&quot; OrganizationCode=&quot;${UUID}&quot;  OrganizationName=&quot;${NAME}&quot; ParentOrganizationCode=&quot;${ParentOrganizationCode}&quot;  PrimaryEnterpriseKey=&quot;${PrimaryEnterpriseKey}&quot; IsNode=&quot;Y&quot; DefaultDistributionRuleId=&quot;${DefaultDistributionRuleId}&quot; &gt;

&lt;CorporatePersonInfo AddressLine1=&quot;${ADDR1}&quot; AddressLine2=&quot;Ville de Qu√©bec&quot;  City=&quot;${CITY}&quot; State=&quot;${STATE_PROV}&quot; 
					ZipCode=&quot;${POSTAL}&quot; Country=&quot;${COUNTRY}&quot; DayPhone=&quot;${PHONE}&quot; EMailID=&quot;${EMAIL}&quot; /&gt;
&lt;ContactPersonInfo  AddressLine1=&quot;${ADDR1}&quot; AddressLine2=&quot;${ADDR2}&quot;  City=&quot;${CITY}&quot; State=&quot;${STATE_PROV}&quot; 
					ZipCode=&quot;${POSTAL}&quot; Country=&quot;${COUNTRY}&quot; DayPhone=&quot;${PHONE}&quot; EMailID=&quot;${EMAIL}&quot; /&gt;

&lt;Node  InventoryTracked=&quot;Y&quot; Inventorytype=&quot;TRACK&quot;  NodeType=&quot;Store&quot;  ShipNode=&quot;${UUID}&quot; 
ReturnCenterFlag=&quot;N&quot; ReturnsNode=&quot;N&quot; ThreePlNode=&quot;N&quot; ShippingNode=&quot;Y&quot; UseEndOfShiftTime=&quot;N&quot; 
IsFulfillmentNode=&quot;Y&quot;  IsItemBasedAllocationAllowed=&quot;Y&quot;  &gt;
&lt;Extn ExtnSlaHours=&quot;2&quot; ExtnBufferHours=&quot;1&quot; /&gt;
&lt;/Node&gt;

&lt;/Organization&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">ManageOrganizationHierachy</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script"></stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
            <stringProp name="scriptLanguage"></stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">sampler.setDataEncoding(&quot;UTF-8&quot;);</stringProp>
            <stringProp name="scriptLanguage"></stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <SyncTimer guiclass="TestBeanGUI" testclass="SyncTimer" testname="Synchronizing Timer" enabled="false">
          <intProp name="groupSize">0</intProp>
          <longProp name="timeoutInMs">0</longProp>
        </SyncTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
