<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r2016">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">fom-test-nl.media-saturn.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseDir" elementType="Argument">
            <stringProp name="Argument.name">baseDir</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}${__BeanShell(File.separator,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Fetch details credentials" enabled="true">
        <collectionProp name="Arguments.arguments"/>
        <stringProp name="filename">${baseDir}\..\..\MMS_Credentials_Properties.properties</stringProp>
        <stringProp name="variablesPrefix"></stringProp>
        <stringProp name="delimiter">=</stringProp>
        <intProp name="skipLines">0</intProp>
        <boolProp name="storeSysProp">false</boolProp>
      </kg.apc.jmeter.config.VariablesFromCSV>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Fetch details from Test Cases Input CSV" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${baseDir}\..\..\MMS_TestData_MultiLine.CSV</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="expicient.extest.jmeter.config.ExpSterlingEnvDefaultsConfigGui" testclass="ConfigTestElement" testname="MMS Environment Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.config.ExpSterlingEnvDefaultsConfigGui" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="YFSEnvironment.userId" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.name">YFSEnvironment.userId</stringProp>
              <stringProp name="Argument.value">${username}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
            <elementProp name="YFSEnvironment.password" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.name">YFSEnvironment.password</stringProp>
              <stringProp name="Argument.value">Summer2021,</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">/smcfs/interop/InteropHttpServlet</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Order No Generation" enabled="true">
        <stringProp name="maximumValue">999999</stringProp>
        <stringProp name="minimumValue">100000</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <boolProp name="perThread">false</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">OrderNo</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sales Order Flow without Fragment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1568008041000</longProp>
        <longProp name="ThreadGroup.end_time">1568008041000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="DeliveryPromise" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="DeliveryPromise" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">mshGetDeliveryPromise</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Promise AllocationRuleID=&quot;&quot; EnterpriseCode=&quot;MSH_NL&quot; OrganizationCode=&quot;MSH_NL&quot;  OptimizationType=&quot;01&quot; &gt;
	&lt;ShipToAddress AddressLine1=&quot;&quot; AddressLine6=&quot;&quot; City=&quot;Wein&quot; Country=&quot;NL&quot; ZipCode=&quot;1120&quot; /&gt;
	&lt;PromiseLines&gt;
		&lt;PromiseLine ItemID=&quot;${item1}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;1&quot; 
		LevelOfService=&quot;MSH_HOME_DEL&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
		
		&lt;PromiseLine ItemID=&quot;${item2}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;1&quot; 
		LevelOfService=&quot;MSH_HOME_DEL&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
	&lt;/PromiseLines&gt;
&lt;/Promise&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">DeliveryPromise</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="DelvDateValidation" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">DelvDate</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@DeliveryDate</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipDateValidation" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">ShipDate</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@ShipDate</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipNode" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">DelvPromise_ShipNode</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Assignment/@ShipNode</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="ReservationId" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="ReservationId" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">MSHReserveAvailableInventory</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Promise EnterpriseCode=&quot;MSH_NL&quot; OrganizationCode=&quot;MM_NL&quot;  OptimizationType=&quot;01&quot; &gt;
	&lt;ReservationParameters  ReservationID=&quot;${OrderNo}f8-72eb-4272-9fd9-40bfb1d96beb&quot; AllowPartialReservation=&quot;N&quot; /&gt;
	&lt;ShipToAddress AddressLine1=&quot;dsagfqe&quot; AddressLine6=&quot;&quot; City=&quot;Wien&quot; Country=&quot;NL&quot; ZipCode=&quot;112a0&quot; /&gt;
	&lt;PromiseLines&gt;
		&lt;PromiseLine ItemID=&quot;${item1}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;${RequiredQty}&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; 
		FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
		
		&lt;PromiseLine ItemID=&quot;${item2}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;${RequiredQty}&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; 
		FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;

		&lt;PromiseLine ItemID=&quot;${item3}&quot; UnitOfMeasure=&quot;EACH&quot; RequiredQty=&quot;${RequiredQty}&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; 
		FulfillmentType=&quot;MSH_HOMEDEL&quot; DeliveryMethod=&quot;SHP&quot; LineId=&quot;1&quot; /&gt;
		
		
	&lt;/PromiseLines&gt;
&lt;/Promise&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">ReservationId</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ReservationIDValidation" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">ReservationID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservation/@ReservationID</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ShipNode" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">ShipNode</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservation/@ShipNode</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="QtyToBeReserved" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">QtyToBeReserved</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservations/@QtyToBeReserved</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (&quot;${QtyToBeReserved}&quot; == &quot;${TotalReservedQty}&quot;){

	SampleResult.setSuccessful(true);
	SampleResult.setResponseMessage(&quot;Reservation is successfull : reservation id &quot;  +   &quot;${ReservationID}&quot;);
}

else{

	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Reservation is Failed : Invalid ItemID &quot; + &quot;${ItemID}&quot;  + &quot;${ErrorMsg}&quot;);
	SampleResult.setStopTestNow(true);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TotalReservedQty" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">TotalReservedQty</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//Reservations/@TotalReservedQty</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ErrorMsg" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">ErrorMsg</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Errors/Error/@ErrorDescription</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ItemID" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">ItemID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//PromiseLine/@ItemID</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="Create Order" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="Create Order" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">N</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">createOrder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Order CustomerEMailID=&quot;TestingBBB001@gmail.com&quot; DocumentType=&quot;0001&quot; EnterpriseCode=&quot;MSH_NL&quot; OrderDate=&quot;${CurrenttimeStamp}&quot; OrderName=&quot;&quot; SellerOrganizationCode=&quot;MM_NL&quot; BypassPricing=&quot;Y&quot; SearchCriteria1=&quot;Y&quot; PaymentStatus=&quot;PAID&quot; ConditionVariable1 =&quot;N&quot; OrderNo=&quot;${OrderNo}&quot; EntryType=&quot;DESKTOP&quot; OrderType=&quot;B2C_SALE&quot; OrderPurpose=&quot;&quot;&gt;
&lt;Extn RetailPriceInclDuties=&quot;Y&quot; AlternativeUserID=&quot;123&quot; WCSUserId=&quot;76779&quot; UCMUserID=&quot;ewewe&quot; LoyaltyId=&quot;23323&quot; OutletID=&quot;${ShipNode}&quot; Language=&quot;en&quot; &gt;
&lt;MSHLoyaltyDtlList&gt;
&lt;MSHLoyaltyDtl IsLoyaltyMember=&quot;Y&quot; WinFlag=&quot;Y&quot; WinType=&quot;String 20&quot; WinAmount=&quot;14&quot; /&gt;
&lt;/MSHLoyaltyDtlList&gt;
&lt;MSHLegalAgreementDtlList&gt;
&lt;MSHLegalAgreementDtl AgreementType=&quot;Type&quot; AgreementDate=&quot;20160222T00:00:00&quot; AgreementVersion=&quot;String 255&quot; AgreementVersionDate=&quot;20160222T00:00:00&quot; Brand=&quot;SATURN&quot; /&gt;
&lt;/MSHLegalAgreementDtlList&gt;
&lt;MSHB2bCustomerDtlList&gt;
&lt;MSHB2bCustomerDtl BusinessScope=&quot;Global&quot; CompanyName=&quot;&quot; CompanyWebsite=&quot;www.google.com&quot; ContactPerson=&quot;&quot; Department=&quot;&quot; JobTitle=&quot;Manager&quot; LegalStructure=&quot;&quot; TaxOffice=&quot; &quot; VATRegNo=&quot;&quot; /&gt;
&lt;/MSHB2bCustomerDtlList&gt;
&lt;/Extn&gt;
&lt;HeaderCharges&gt;
&lt;HeaderCharge ChargeAmount=&quot;20&quot; ChargeCategory=&quot;HOMEDEL_SHIPPING_FEE&quot; ChargeName=&quot;HOMEDEL_SHIPPING_FEE&quot; IsManual=&quot;&quot; Reference=&quot;20001&quot; /&gt;
&lt;/HeaderCharges&gt;
&lt;HeaderTaxes&gt;
&lt;!-- Charge Name in haeder tax is related to Charge name of Header Charge name field--&gt;
&lt;HeaderTax ChargeCategory=&quot;HOMEDEL_SHIPPING_TAX&quot; ChargeName=&quot;HOMEDEL_SHIPPING_TAX&quot; Reference1=&quot;VATKEY=2&quot; Reference2=&quot;20001&quot; Tax=&quot;4&quot; TaxName=&quot;VAT&quot; TaxPercentage=&quot;20.00&quot; TaxableFlag=&quot;N&quot; /&gt;
&lt;/HeaderTaxes&gt;

&lt;OrderLines&gt;
&lt;!-- 1 or more order line. Optional for Draft order --&gt;
&lt;OrderLine DeliveryMethod=&quot;SHP&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; ShipNode=&quot;${ShipNode}&quot; OrderedQty=&quot;${QtyToBeReserved}&quot; PrimeLineNo=&quot;1&quot; SubLineNo=&quot;1&quot; LineType=&quot;STOCKED&quot;&gt;
&lt;Extn WDDFromDeliveryTime=&quot;${CurrenttimeStamp}-05:00&quot; WDDToDeliveryTime=&quot;${CurrenttimeStamp}&quot; QtyFromUnplannedInventory=&quot;&quot; ShippingCostRefID=&quot;20001&quot; ReservationNodeShipDate=&quot;&quot; DeliveryTimeFrame=&quot;&quot; LogisticsClass=&quot;&quot; LineItemNumber=&quot;20001&quot; Brand=&quot;MM&quot; ReleaseDate=&quot;&quot; ReleaseText=&quot;&quot; SplitCriteria1=&quot;1&quot;&gt;
&lt;MSHOrderlineFeatureList&gt;
&lt;MSHOrderlineFeature FeatureID=&quot;Betriebssystem des Gerätes&quot; Label=&quot;Betriebssystem des Gerätes&quot; FeatureValue=&quot;MAC OS&quot; /&gt;
&lt;MSHOrderlineFeature FeatureID=&quot;Größe je Platte (GB)&quot; Label=&quot;Größe je Platte (GB)&quot; FeatureValue=&quot;1000 GB SSD&quot; /&gt;
&lt;/MSHOrderlineFeatureList&gt;
&lt;!-- Applicable when customer purchase warranty--&gt;
&lt;/Extn&gt;
&lt;Item ItemDesc=&quot;APPLE MacBook Pro Retina 15.4 Zoll (MJLQ2D/A)&quot; ItemID=&quot;${item1}&quot; ItemShortDesc=&quot;APPLE MacBook Pro Retina 15.4 Zoll (MJLQ2D/A)&quot; TaxProductCode=&quot;&quot; UPCCode=&quot;&quot; UnitOfMeasure=&quot;EACH&quot; /&gt;
&lt;LineCharges&gt;
&lt;LineCharge ChargeCategory=&quot;PROMOTION&quot; ChargeName=&quot;ID&quot; ChargePerUnit=&quot;10&quot; IsManual=&quot;&quot; Reference=&quot;23213&quot;&gt;
&lt;Extn ChargeDescription=&quot;´Festival promotion&quot; DiscountType=&apos;ID&apos; CostCenter=&quot;${ShipNode}&quot; DiscountQualifier=&apos;OrderTotal&apos; /&gt;
&lt;/LineCharge&gt;
&lt;/LineCharges&gt;
&lt;LinePriceInfo IsPriceLocked=&quot;Y&quot; ListPrice=&quot;20&quot; UnitPrice=&quot;20&quot;/&gt;
&lt;LineTaxes&gt;
&lt;LineTax ChargeCategory=&quot;LINE_TAX&quot; ChargeName=&quot;&quot; Reference1=&quot;0&quot; Reference2=&quot;&quot; Reference3=&quot;EUR&quot; Tax=&quot;334&quot; TaxName=&quot;VAT&quot; TaxPercentage=&quot;20&quot; TaxableFlag=&quot;Y&quot;/&gt;
&lt;/LineTaxes&gt;



&lt;/OrderLine&gt;



&lt;OrderLine DeliveryMethod=&quot;SHP&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; ItemGroupCode=&quot;PROD&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; LineType=&quot;INTANGIBLE&quot; ShipNode=&quot;${ShipNode}&quot; OrderedQty=&quot;${QtyToBeReserved}&quot; PrimeLineNo=&quot;2&quot; ReqShipDate=&quot;${CurrenttimeStamp}&quot; SubLineNo=&quot;1&quot;&gt;
&lt;Item CostCurrency=&quot;EUR&quot; ItemDesc=&quot;ALTCOM13&quot; ItemID=&quot;${item2}&quot; ItemShortDesc=&quot;Anschluss inkl. Altgerätabtransport JB SAT CAT hallo sat - (Test for Mladen) V6&quot; UPCCode=&quot;2000011917319&quot; UnitCost=&quot;39.9&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;
&lt;LinePriceInfo IsPriceLocked=&quot;Y&quot; ListPrice=&quot;39.9&quot; UnitPrice=&quot;39.9&quot;/&gt;
&lt;LineCharges/&gt;
&lt;LineTaxes&gt;
&lt;LineTax ChargeCategory=&quot;LINE_TAX&quot; ChargeName=&quot;LineTax&quot; Reference1=&quot;1&quot; Reference2=&quot;6.65&quot; Tax=&quot;6.65&quot; TaxName=&quot;VAT&quot; TaxPercentage=&quot;20&quot; TaxableFlag=&quot;N&quot;/&gt;
&lt;/LineTaxes&gt;
&lt;Extn Brand=&quot;TECTRAXX&quot; DeliveryOrchestor=&quot;metapackorder&quot; LineItemNumber=&quot;34405011&quot; LocationProviderID=&quot;locationproviderid&quot; LogisticsClass=&quot;0&quot; PUDOID=&quot;pudoid&quot; SplitCriteria1=&quot;2PRS&quot; WDDFromDeliveryTime=&quot;${CurrenttimeStamp}-05:00&quot; WDDToDeliveryTime=&quot;${CurrenttimeStamp}&quot;&gt;
&lt;MSHOrderlineFeatureList/&gt;
&lt;/Extn&gt;
&lt;/OrderLine&gt;




&lt;OrderLine DeliveryMethod=&quot;SHP&quot; FulfillmentType=&quot;MSH_HOMEDEL&quot; ShipNode=&quot;${ShipNode}&quot; ItemGroupCode=&quot;PROD&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; LineType=&quot;INTANGIBLE&quot; OrderedQty=&quot;${QtyToBeReserved}&quot; PrimeLineNo=&quot;3&quot; ReqShipDate=&quot;${CurrenttimeStamp}&quot; SubLineNo=&quot;1&quot;&gt;
&lt;Item CostCurrency=&quot;EUR&quot; ItemDesc=&quot;ALTCOM13&quot; ItemID=&quot;${item3}&quot; ItemShortDesc=&quot;Anschluss inkl. Altgerätabtransport JB SAT CAT hallo sat - (Test for Mladen) V6&quot; UPCCode=&quot;2000011917319&quot; UnitCost=&quot;39.9&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;
&lt;LinePriceInfo IsPriceLocked=&quot;Y&quot; ListPrice=&quot;39.9&quot; UnitPrice=&quot;39.9&quot;/&gt;
&lt;LineCharges/&gt;
&lt;LineTaxes&gt;
&lt;LineTax ChargeCategory=&quot;LINE_TAX&quot; ChargeName=&quot;LineTax&quot; Reference1=&quot;1&quot; Reference2=&quot;6.65&quot; Tax=&quot;6.65&quot; TaxName=&quot;VAT&quot; TaxPercentage=&quot;20&quot; TaxableFlag=&quot;N&quot;/&gt;
&lt;/LineTaxes&gt;
&lt;Extn Brand=&quot;TECTRAXX&quot; DeliveryOrchestor=&quot;metapackorder&quot; LineItemNumber=&quot;34405011&quot; LocationProviderID=&quot;locationproviderid&quot; LogisticsClass=&quot;0&quot; PUDOID=&quot;pudoid&quot; SplitCriteria1=&quot;2PRS&quot; WDDFromDeliveryTime=&quot;${CurrenttimeStamp}-05:00&quot; WDDToDeliveryTime=&quot;${CurrenttimeStamp}&quot;&gt;
&lt;MSHOrderlineFeatureList/&gt;
&lt;/Extn&gt;
&lt;/OrderLine&gt;





&lt;/OrderLines&gt;
&lt;OrderLineRelationships&gt;



&lt;OrderLineRelationship RelationshipType=&quot;SERVICE&quot;&gt;
&lt;ParentLine PrimeLineNo=&quot;1&quot; SubLineNo=&quot;1&quot;/&gt;
&lt;ChildLine PrimeLineNo=&quot;2&quot; SubLineNo=&quot;1&quot;/&gt;
&lt;ChildLine PrimeLineNo=&quot;3&quot; SubLineNo=&quot;1&quot;/&gt;
&lt;/OrderLineRelationship&gt;
&lt;/OrderLineRelationships&gt;
&lt;Notes&gt;
&lt;Note NoteText=&quot;Order created successfully&quot; ReasonCode=&quot;ORDER_CREATE&quot; /&gt;
&lt;/Notes&gt;
&lt;PersonInfoBillTo AddressID=&quot;&quot;
AddressLine1=&quot;dsagfqe&quot; AddressLine2=&quot;&quot;
City=&quot;Wien&quot; Company=&quot;&quot; Country=&quot;NL&quot; DayPhone=&quot;422464214&quot;
EMailID=&quot;TestingBBB001@gmail.com&quot; FirstName=&quot;hth&quot;
JobTitle=&quot;&quot; LastName=&quot;yjr&quot; MobilePhone=&quot;422464214&quot; Title=&quot;&quot; ZipCode=&quot;1120&quot;&gt;
&lt;Extn Unknown=&quot;&quot;/&gt;
&lt;/PersonInfoBillTo&gt;
&lt;PersonInfoShipTo AddressID=&quot;&quot;
AddressLine1=&quot;dsagfqe&quot; AddressLine2=&quot;&quot;
City=&quot;Wien&quot; Company=&quot;&quot; Country=&quot;NL&quot; DayPhone=&quot;422464214&quot;
EMailID=&quot;TestingBBB001@gmail.com&quot; FirstName=&quot;hth&quot;
JobTitle=&quot;&quot; LastName=&quot;yjr&quot; MobilePhone=&quot;422464214&quot; Title=&quot;&quot; ZipCode=&quot;1120&quot;&gt;
&lt;Extn Unknown=&quot;&quot;/&gt;
&lt;/PersonInfoShipTo&gt; &lt;PriceInfo Currency=&quot;EUR&quot; /&gt;





&lt;PaymentMethods&gt;
&lt;PaymentMethod PaymentReference1=&quot;74220048004&quot;
PaymentReference2=&quot;&quot; PaymentReference9=&quot;PAYPAL&quot; PaymentType=&quot;PAYPAL&quot;&gt;
&lt;PaymentDetailsList&gt;
&lt;PaymentDetails ChargeType=&quot;CHARGE&quot;
ProcessedAmount=&quot;109.80&quot; RequestAmount=&quot;109.80&quot;/&gt;
&lt;/PaymentDetailsList&gt;
&lt;/PaymentMethod&gt;
&lt;/PaymentMethods&gt;
&lt;/Order&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Create Order</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get current time" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;


Date date = new Date();

		SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);

		String CurrenttimeStamp = sdf.format(date);

		vars.put(&quot;CurrenttimeStamp&quot;,CurrenttimeStamp);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">1</intProp>
          </ResultAction>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="OrderHeaderKey" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">OrderHeaderKey</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@OrderHeaderKey</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="CurrentTimeStamp1" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;


Date date = new Date();

		SimpleDateFormat sdf = new SimpleDateFormat(&quot;HHmmss&quot;);

		String CurrenttimeStamp = sdf.format(date);

		vars.put(&quot;CurrentTimeStamp1&quot;,CurrenttimeStamp);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor - Order Number" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">OrderNum</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@OrderNo</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="EnterpriseCode" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">EnterpriseCode</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@EnterpriseCode</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (&quot;${EnterpriseCode}&quot; == &quot;MSH_NL&quot;){

	SampleResult.setSuccessful(true);
	SampleResult.setResponseMessage(&quot;Order created successfully : Order ID :  &quot;  +   &quot;${OrderNo}&quot;);
}

else{

	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Order Failed :&quot; +&quot; ${ErrorMsg}&quot;);
	SampleResult.setStopTestNow(true);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="OrderNo" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">OrderNo</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@OrderNo</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="ErrorMsg" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">ErrorMsg</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Errors/Error/@ErrorDescription</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="Release Order" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="Release Order" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">N</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">releaseOrder</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;ReleaseOrder DocumentType=&quot;0001&quot; EnterpriseCode=&quot;MSH_NL&quot; OrderNo=&quot;${OrderNo}&quot; IgnoreReleaseDate=&apos;Y&apos;/&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Release Order</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">2</intProp>
          </ResultAction>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="GMS Hold Resolve" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="GMS Hold Resolve" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">MSHGetGMSSalesDocUpdateSync</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;OrderRelease xmlns=&quot;http://www.sterlingcommerce.com/documentation/YFS/CHANGE_ORDER&quot; Action=&quot;SUCCESS&quot; DocumentType=&quot;0001&quot; 
EnterpriseCode=&quot;MSH_NL&quot; OrderNo=&quot;${OrderNo}&quot; Override=&quot;Y&quot; ReleaseNo=&quot;1&quot;&gt;
					&lt;Order&gt;
						&lt;OrderLines&gt;
							&lt;OrderLine PrimeLineNo=&quot;1&quot; SubLineNo=&quot;1&quot;&gt;
								&lt;Extn WarrantyNumber=&quot;&quot;/&gt;
							&lt;/OrderLine&gt;
							&lt;OrderLine PrimeLineNo=&quot;2&quot; SubLineNo=&quot;1&quot;&gt;
								&lt;Extn WarrantyNumber=&quot;&quot;/&gt;
							&lt;/OrderLine&gt;
						&lt;/OrderLines&gt;
					&lt;/Order&gt;
					&lt;Extn SalesDocumentNo=&quot;40211141&quot;/&gt;
				&lt;/OrderRelease&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">GMS Hold Resolve</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">2</intProp>
          </ResultAction>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Resolve Hold - Validation" enabled="false">
            <stringProp name="BeanShellAssertion.query">if (&quot;${Errormsg}&quot; != &quot;null&quot;)
{
	Failure = true;
	FailureMessage = &quot;${ErrorDesc}&quot;;
	SampleResult.setResponseMessage(&quot;Resolve Hold API Failed - &quot; + &quot;${ErrorDesc}&quot;);
}
else
{
	SampleResult.setResponseMessage(&quot;Order Hold is resolved successfully: For line No 2: &quot; + &quot;${item2}&quot;);
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Status" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">Status</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//OrderHoldType/@Status</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="Confirm Shipment" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="Confirm Shipment" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">MSHProcessDespatchadvice</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Shipment ActualShipmentDate=&quot;${CurrenttimeStamp}&quot; DocumentType=&quot;0001&quot; EnterpriseCode=&quot;MSH_NL&quot; LevelOfService=&quot;MSH_HOME_DEL&quot; 
OrderNo=&quot;${OrderNo}&quot; ReleaseNo=&quot;1&quot; SellerOrganizationCode=&quot;MM_NL&quot; ShipNode=&quot;${ShipNode}&quot; ShipmentNo=&quot;${OrderNo}1&quot; xmlns=&quot;&quot;&gt;
&lt;Containers&gt;
&lt;Container SCAC=&quot;DHL&quot; TrackingNo=&quot;${OrderNo}142&quot;&gt;
&lt;ContainerDetails&gt;
&lt;ContainerDetail&gt;
&lt;ShipmentLine ItemID=&quot;${item1}&quot; OrderNo=&quot;${OrderNo}&quot; PrimeLineNo=&quot;1&quot; Quantity=&quot;${QtyToBeReserved}&quot; ReleaseNo=&quot;1&quot; SubLineNo=&quot;1&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;
&lt;ShipmentLine ItemID=&quot;${item2}&quot; OrderNo=&quot;${OrderNo}&quot; PrimeLineNo=&quot;2&quot; Quantity=&quot;${QtyToBeReserved}&quot; ReleaseNo=&quot;1&quot; SubLineNo=&quot;1&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;
&lt;ShipmentLine ItemID=&quot;${item3}&quot; OrderNo=&quot;${OrderNo}&quot; PrimeLineNo=&quot;3&quot; Quantity=&quot;${QtyToBeReserved}&quot; ReleaseNo=&quot;1&quot; SubLineNo=&quot;1&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;

&lt;/ContainerDetail&gt;
&lt;/ContainerDetails&gt;
&lt;/Container&gt;
&lt;/Containers&gt;
&lt;ShipmentLines&gt;
&lt;ShipmentLine DeliveryStatus=&quot;SHP&quot; ItemID=&quot;${item1}&quot; OrderNo=&quot;${OrderNo}&quot; PrimeLineNo=&quot;1&quot; Quantity=&quot;${QtyToBeReserved}&quot; ReleaseNo=&quot;1&quot; SubLineNo=&quot;1&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;
&lt;ShipmentLine DeliveryStatus=&quot;SHP&quot; ItemID=&quot;${item2}&quot; OrderNo=&quot;${OrderNo}&quot; PrimeLineNo=&quot;2&quot; Quantity=&quot;${QtyToBeReserved}&quot; ReleaseNo=&quot;1&quot; SubLineNo=&quot;1&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;
&lt;ShipmentLine DeliveryStatus=&quot;SHP&quot; ItemID=&quot;${item3}&quot; OrderNo=&quot;${OrderNo}&quot; PrimeLineNo=&quot;3&quot; Quantity=&quot;${QtyToBeReserved}&quot; ReleaseNo=&quot;1&quot; SubLineNo=&quot;1&quot; UnitOfMeasure=&quot;EACH&quot;/&gt;

&lt;/ShipmentLines&gt;
&lt;/Shipment&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Confirm Shipment</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">System.out.println(&quot;Ship Order&quot;);
SampleResult.setResponseMessage(&quot;Order is shipped&quot;);

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">2</intProp>
          </ResultAction>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Get current time" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;


Date date = new Date();

		SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;);

		String CurrenttimeStamp = sdf.format(date);

		vars.put(&quot;CurrenttimeStamp&quot;,CurrenttimeStamp);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="Settle Order" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="Settle Order" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">Y</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">MSHGetGMSSalesDocUpdateSync</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;OrderRelease xmlns=&quot;http://www.sterlingcommerce.com/documentation/YFS/CHANGE_ORDER&quot; Action=&quot;COMPLETE&quot; DocumentType=&quot;0001&quot; EnterpriseCode=&quot;MSH_NL&quot; OrderNo=&quot;${OrderNo}&quot; Override=&quot;Y&quot; ReleaseNo=&quot;1&quot;&gt;
					&lt;Order&gt;
						&lt;OrderLines&gt;
							&lt;OrderLine PrimeLineNo=&quot;1&quot; SubLineNo=&quot;1&quot;&gt;
								&lt;Extn WarrantyNumber=&quot;&quot;/&gt;
							&lt;/OrderLine&gt;
						&lt;/OrderLines&gt;
					&lt;/Order&gt;
					&lt;Extn SalesDocumentNo=&quot;40211142&quot;/&gt;
				&lt;/OrderRelease&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Settle Order</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">2</intProp>
          </ResultAction>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="67232232">Error</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">5000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="GetOrderDetails" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="GetOrderDetails" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">N</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">getOrderDetails</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Order OrderHeaderKey=&quot;${OrderHeaderKey}&quot;/&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">GetOrderDetails</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="OrdStatus" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">OrdStatus</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@Status</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="PaymentStatus" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">PaymentStatus</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@PaymentStatus</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">if (&quot;${OrdStatus}&quot; == &quot;Partially Order Completed&quot; &amp;&amp; &quot;${PaymentStatus}&quot; == &quot;PAID&quot;){

	SampleResult.setSuccessful(true);
	SampleResult.setResponseMessage(&quot;Order is successfull&quot;  +   &quot;${LineNumber}&quot;);
}

else{

	SampleResult.setSuccessful(false);
	SampleResult.setResponseMessage(&quot;Order is Failed&quot;);
	SampleResult.setStopTestNow(true);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Line1Status" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">Line1Status</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@MaxOrderStatusDesc</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Line2Status" enabled="true">
            <stringProp name="XPathExtractor.default">0</stringProp>
            <stringProp name="XPathExtractor.refname">Line2Status</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Order/@MinOrderStatusDesc</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="HTTPSamplerProxy" testname="Order Status and Payment validation" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="expicient.extest.jmeter.sampler.ExpStrlngTstClientSamplerGUI" testclass="Arguments" testname="Order Status and Payment validation" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="IsFlow" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">IsFlow</stringProp>
                <stringProp name="Argument.value">N</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">InteropApiName</stringProp>
                <stringProp name="Argument.value">getOrderDetails</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="InteropApiData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">InteropApiData</stringProp>
                <stringProp name="Argument.value">&lt;Order OrderHeaderKey=&quot;${OrderHeaderKey}&quot;/&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="TemplateData" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">TemplateData</stringProp>
                <stringProp name="Argument.value">&lt;Order OrderHeaderKey=&quot;&quot; PaymentStatus=&quot;&quot; MinOrderStatusDesc=&quot;&quot;&gt;
	&lt;OverallTotals  GrandTotal=&quot;&quot;/&gt;
	&lt;ChargeTransactionDetails&gt;
		&lt;ChargeTransactionDetail&gt;
			&lt;InvoiceCollectionDetails AmountCollected=&quot;&quot;/&gt;
		&lt;/ChargeTransactionDetail&gt;
	&lt;/ChargeTransactionDetails&gt;
&lt;/Order&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Order Status and Payment validation</stringProp>
          </elementProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Status validation" enabled="true">
            <boolProp name="XPath.negate">false</boolProp>
            <stringProp name="XPath.xpath">Order/@PaymentStatus=&quot;PAID&quot; and
Order/@MinOrderStatusDesc=&quot;Shipped&quot;</stringProp>
            <boolProp name="XPath.validate">false</boolProp>
            <boolProp name="XPath.whitespace">false</boolProp>
            <boolProp name="XPath.tolerant">false</boolProp>
            <boolProp name="XPath.namespace">false</boolProp>
          </XPathAssertion>
          <hashTree/>
          <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action Handler" enabled="true">
            <intProp name="OnError.action">2</intProp>
          </ResultAction>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>2</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
